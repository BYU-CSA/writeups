gem 'openssl'
require 'openssl'
require 'aes_key_wrap'

def derive_key(password, crypto_salt, crypto_iterations)
    return OpenSSL::PKCS5.pbkdf2_hmac(password, crypto_salt,  crypto_iterations, 16, OpenSSL::Digest::SHA256.new)
end

key_encrypting_key = derive_key("su5Syb@k4", "\xFC\x51\xC8\x27\x22\xC7\xE7\xB4\x68\xD1\x5D\xBF\x45\xBD\xA2\x49", 20000)



def unwrap_key(wrapped_key, key_encrypting_key)
    return AESKeyWrap.unwrap(wrapped_key, key_encrypting_key)
end
    
unwrapped_key = unwrap_key("\x20\x34\x85\xA3\x95\x69\x6E\x10\x1A\x85\xEB\x33\xAB\x68\x41\xAE\x21\x17\x1F\x9D\x3E\xAB\xCC\xFB", key_encrypting_key)



def decrypt_aes_gcm(key, iv, tag, data)
    decrypter = OpenSSL::Cipher.new('aes-128-gcm').decrypt
    decrypter.iv_len = 16
    decrypter.key = key
    decrypter.iv = iv
    decrypter.auth_tag = tag
    plaintext = decrypter.update(data) + decrypter.final
end

iv = "\x86\x99\x1D\x1E\xE8\xB9\xF9\x7B\x3B\x10\xD4\xE9\x62\x52\x69\x50"
tag = "\x94\xc9\xf1\xa0\xd7\x4d\xd2\x3e\x93\x23\xd4\x1d\x2d\xc5\x21\x74"
encrypted_data = "\x8F\x16\x77\x80\x3C\x36\xC6\x58\xEE\xF8\x7C\xEF\xDD\x4B\x38\x7B\xCB\x4D\x8E\x66\x61\x05\x2F\x84\x9C\x04\x8E\x04\x70\xDF\xC5\x30\x58\xD9\xA3\x31\x52\x69\x66\x8D\x84\x59\x3F\x1B\xE9\x6B\xA8\xD6\xF8\xAF\xE7\x78\xFB\xA9\x94\x44\xA9\xF9\x98\xCF\xAC\x14\xA8\xB0\x85\xEF\xC4\x49\xDD\x7C\x10\x2A\xC3\x70\x11\xCE\x8F\xF6\xD7\xEA\x7C\x78\xC6\x02\x31\xFC\xAA\x27\x91\x9B\x17\xC5\x22\x2E\x96\x25\x26\xFA\x8B\xFF\x2A\xA7\xFD\x33\x03\x68\xF9\x0F\x49\xD8\x7E\x1A\xF8\xD4\x63\x14\x11\x21\xE2\x13\x23\x46\xDB\xCC\x66\x05\x6C\x2E\x9B\xEA\x6F\x94\x28\x8D\x52\x55\x6E\x3B\x77\xFD\xE8\x3B\x18\xC6\xFE\xC7\x05\xF1\xDB\x87\x5E\xAD\xB9\x4D\x71\xB6\x63\xC9\xB1\xFE\x55\x9A\x89\xCD\xC4\x82\xA9\x4A\xE8\xD2\x68\xA9\x52\xFC\xF1\xD5\x66\x90\x14\x5A\x18\x53\xB7\xAE\x50\x87\x17\xCB\xC5\x95\x32\x68\xEF\xBA\x61\x5D\xE9\xC1\x9F\xEC\x90\xE1\xF0\x78\x1E\x76\xB6\x73\x8A\xED\x1D\xCC\xD4\xFD\xCD\xAF\x7E\xF2\x92\x10\xC4\x92\xC0\xF3\x38\xA3\x6E\xF6\xA9\x9C\xCA\xF8\xB3\xF4\x72\xF3\x47\xEB\x28\x82\x02\x4C\xA9\x3D\xD6\x8D\xB4\x61\x1D\xA7\x22\x33\x55\x98\xFF\x0E\xB8\x75\x40\xFB\x81\x92\x5D\x13\x0E\x60\x85\x95\x79\x89\x0A\xF7\x24\x22\x5E\x08\xDC\x81\x9E\x35\x5D\x81\xD4\xA0\x46\x7C\x9F\xE3\x8C\x33\x8F\xEA\x11\x4E\x94\xC5\x5B\x0B\x3E\x70\x32\x92\xB6\xA0\x38\x65\x63\xE5\xA5\x64\x4A\xE6\x88\x1B\xA4\xA8\x9B\x0D\xE2\xA8\x9B\x2B\x63\x4D\xE8\x70\x9C\x1E\x97\xE4\xDB\xF3\x95\x87\xF3\x5C\xA7\x7C\x6A\xBD\x6B\x11\x0E\xC5\x48\xEC\x87\xA6\xFF\x40\x3B\xA7\x0B\x6F\xB4\x0D\xEE\xCF\x20\x89\x1F\xEB\xA5\xCE\x3C\x79\x1D\x0E\x63\x3F\xC8\x3E\xCB\x25\xC2\x40\x2E\xAE\xBC\xE8\x2F\x99\xBD\x4E\x9A\x32\x48\x6B\xD4\x88\x2B\x7A\xD9\xF6\xFB\x23\xCB\xC4\x47\x8E\x5F\xAB\xC5\x42\xA6\xAF\xFD\x13\x2B\xAA\xD8\x26\xD3\x56\x5F\xB1\x4C\x0C\xF3\x01\x55\x11\x1D\x5C\x63\x04\x1B\xE8\x56\xCD\xE7\xC7\xE2\x25\xCE\x63\x14\x22\x60\x63\xF4\x11\x54\x30\x1D\x67\x65\x17\x52\xB8\x47\x3D\x00\xCE\xD0\x4E\x86\xB4\x6B\xA7\x79\xB8\x4A\xB3\x07\x8D\x54\x69\xED\xF2\x87\x20\xAB\x47\x87\x4E\x39\x09\x15\xFB\x8A\x2A\xBD\x51\x75\xFA\x45\xF0\xE7\x55\x92\x67\x2C\xED\x96\x81\x24\xEA\xF6\x3F\x5F\x8F\x64\x0A\x01\x32\x92\xA5\xAB\x1D\xBA\x82\xD4\xF5\x86\x93\xEF\x73\xBD\x12\xE5\x9A\x36\x3A\x01\xC6\x2C\x9D\x86\x70\x56\x3D\xAB\xE8\xE6\xCA\xB2\x60\xB4\x01\x05\x3F\xB8\xE1\xDA\x80\x1A\x15\x88\x9B\xA2\x7B\x3D\xE9\xA5\x09\x71\xAE\x74\x10\x01\x88\x61\x77\xAF\x6B\x83\xAF\x6A\xC1\x7B\x76\x2D\x68\xAB\x37\xF5\xB4\xC7\x8C\xE9\x0D\x2D\xD4\x1B\x49\x64\x00\xA3\x0C\x85\x7F\xBE\x59\xD6\x44\xB4\x99\x6D\x96\x54\xAC\xC2\x85\x09\xF3\x78\xD1\x8D\xB3\xE1\x79\xCF\x61\x3E\x8E\xEE\xFC\xE9\x72\xF2\x80\x62\x8A\x17\x71\xDD\x98\xC1\x66\x13\xDB\x7B\x4E\xA3\xA0\x79\xA7\xC9\x30\x62\xA1\xCE\x3A\xE8\x2F\x5F\x19\x2D\xDC\xD9\xC5\x69\x90\xED\x86\x0B\x1F\x5E\x76\x8F\x79\x09\xCA\x88\xB6\x8B\x28\x69\x5F\xB0\x78\x22\x2B\x3A\x5A\x42\x2D\xDA\x76\x56\x7C\xA5\x0C\xF7\x54\x37\x9F\x3F\x7D\x0A\xD6\x57\xE3\x3E\xB2\xC6\x15\x5E\xC2\xEE\x20\x4A\x24\x63\x98\x93\xAD\x04\xA4\x06\xDB\x50\x9F\x69\x6A\x87\x5F\xE0\x00\xD7\xD8\x97\x8F\xF2\xE9\x74\x90\xF7\x91\xDD\x0B\x47\x37\x1D\xF2\xA6\xB3\xF3\x94\xB6\x37\x3E\x37\xF8\x78\xB4\x40\x61\xBF\xD0\x54\xE9\x34\xFA\x79\xC1\x65\xC0\xA8\x21\xF9\xF9\x18\x24\xDD\x39\xDC\xEA\x62\xAB\x62\xC3\xCB\xDB\xCE\x4D\x0A\x18\xAF\xAF\xBE\xEB\xD3\x7A\x00\x53\xD3\x6F\x1B\x47\x27\xA9\xE8\x01\x4D\x97\x25\x1F\x27\xD5\x65\x94\xAF\x2C\x52\x0A\x86\x3C\x95\xD5\xBC\x13\xE6\xD7\x29\x2E\x5B\xCC\x37\x58\xBA\x4E\xEC\xEB\xE2\xAD\x6B\x1C\x17\x0C\x6B\x89\x0B\x83\xA2\xD4\x4E\xD4\x42\x95\xAC\x5C\xFB\x7A\x34\x43\xC9\xF2\xAB\xB0\xFD\x16\x5A\xE8\xAC\xBC\xBA\xE0\xDB\xB2\x4C\x0E\xE4\xC2\x2B\xAB\xCA\xCF\xC7\x0E\xC9\x37\x5A\x68\x78\x71\x7A\x1F\x4F\x7B\x54\xFB\x84\xAD\x26\x8E\x50\x42\x19\xF7\xD9\xF1\xD6\xA6\x84\x61\xD9\x25\x31\x56\xC1\xD0\xD9\x1D\x91\xD5\x07\x86\xD4\x55\x2F\xBC\x8D\x86\xE0\x4B\xEB\x7C\x66\xEB\x87\x4D\xC2\x58\x87\x78\x15\xF3\x1F\xDE\xD0\x18\xFC\xB7\x61\x6D\x1A\xEF\x66\x63\xFA\xA4\x19\xFD\xB5\x7A\x88\xE6\xF2\xDF\x92\x36\x92\x4B\xAB\xCB\xF3\x1E\x91\x84\xDC\x26\x21\xE4\xAE\x94\x8C\x22\x4A\x58\x91\xE1\xC2\xDC\x11\xE1\x1F\x80\xEC\x6D\x66\x53\x9A\xAA\x21\x18\xBE\xEA\x45\x66\xCF\x4C\xE1\x37\xA3\x49\x9C\x07\x56\xE0\x90\xD0\x3B\x7C\xC4\x4A\xA7\x8F\xCB\x30\x5E\x4A\x51\x0B\x88\x75\xD8\xF5\x5C\xF7\xFE\xBC\x2D\x73\x1F\xC2\x32\x20\xE3\xDB\x41\x98\x50\xAC\x8F\xA8\xFA\xF4\x0A\xE3\x14\xEF\xF8\xEE\x47\x4D\x22\x28\x4A\x02\xA9\x09\x33\xD3\x04\xDF\xE5\x15\xA7\xF6\xD3\x8D\x75\x8D\x8E\xAA\x13\xF2\x21\x46\xC6\xC5\xE6\x3E\x41\x85\x22\x4E\x98\xC9\x1C\xC2\xC0\x7E\x8C\xA0\x93\x65\x05\xC3\xF3\x06\xB4\xEF\x00\xE3\x1B\x5A\x86\x6C\x51\x81\xD2\x89\x55\xA5\x64\x22\xEA\x66\x50\xDB\xB7\x60\xBD\xEA\xD2\x1C\xD8\xC3\x31\x60\x4C\xEB\xFA\xAF\xD2\x30\xE8\xBC\x74\x42\xCC\xAE\xAC\x60\xE4\xE7\x20\xCD\x78\x95\xE3\x5C\x90\x69\x17\x85\xFD\x5F\xAB\x5C\x02\x11\xE5\xBE\x74\x17\xD8\x2A\xDA\xC1\x21\x04\x3B\x7C\x95\xAE\x8A\xBE\x84\xD7\xD4\xBC\x38\xEE\xF8\x64\xA0\x19\x5A\x52\xBF\x52\xD4\x4D\x5F\xF0\xF3\x94\x7E\xBB\xF2\x33\x2A\x67\x10\x5B\x08\x12\x9D\xB9\xB4\xAE\x9E\x06\xA3\xD0\x7D\x2E\xE2\x1F\x1D\xC0\xC6\x04\xAE\xD8\x2D\xBE\xE8\xFE\x90\x05\x58\x8B\x5C\xF2\x80\x6D\x96\x46\x65\x18\xA6\xD9\x0B\x66\xF9\x46\xC4\xA6\xF3\x67\xA1\x2B\x12\x16\x61\x2D\xE4\x50\x7D\x3E\xC5\xE5\xB0\xA7\x29\x34\x39\x28\xBA\x60\xC8\x25\x41\x23\x0E\xBA\x52\x21\xD6\x25\x60\x97\xA8\xF7\x59\x3B\x0D\x7D\x5D\xA7\xBB\x30\xED\xF6\xAC\xF8\x64\x86\x0B\xD8\xCB\xD5\x88\x8A\x57\x58\x4B\x6F"

plaintext = decrypt_aes_gcm(unwrapped_key, iv, tag, encrypted_data)

puts plaintext